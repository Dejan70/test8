{"version":3,"sources":["data/reducers/user.js","data/reducers/ui.js","data/reducers/index.js","data/actions/user.js","util/env.js","util/localStorage.js","util/util.js","data/services/api-util.js","data/services/api.js","data/sagas/userSaga.js","data/sagas/index.js","data/services/translate.js","components/layout/index.js","data/services/fields.js","components/field-text/index.js","components/field-password/index.js","components/button/index.js","components/loader-small/index.js","views/login/index.js","views/reset-password/index.js","components/logout/index.js","views/home/index.js","views/reset-password-confirm/index.js","views/not-found/index.js","views/register/index.js","routes.js","middleware/logger.js","middleware/events.js","app.js","serviceWorker.js","index.js"],"names":["userReducer","state","action","type","Object","assign","data","isLoading","error","errorMessage","logout","register","reset","resetConfirm","support","requestDemo","uiReducer","appReducer","combineReducers","user","ui","rootReducer","errorLogin","errorResetPassword","errorResetPasswordConfirm","errorRegister","Env","path","query","encodeURI","process","addQuery","result","keys","reduce","memo","key","substring","length","LocalStorage","def","undefined","has","JSON","parse","localStorage","getItem","err","callback","value","get","set","setItem","stringify","removeItem","clear","keepThem","itemKey","includes","remove","getCurrentTimeSeconds","d","Date","Math","round","getTime","processResponse","response","processError","message","request","Api","username","password","axios","post","getApiUrl","encodeURIComponent","headers","getPublicToken","then","catch","token","params","access_token","loginCall","watchLoginCall","resetPasswordCall","watchResetPasswordCall","resetPasswordConfirmCall","watchResetPasswordConfirmCall","registerCall","watchRegisterCall","call","login","status","userInfo","infoResult","obtain_time","put","takeLatest","resetPassword","resetPasswordConfirm","rootSaga","all","Translate","locale","localeData","this","args","lastArg","replace","match","number","PublicLayout","props","clearAllExcept","dispatch","history","push","Fragment","children","nextProps","prevState","Component","Field","name","validate","disabled","isEmpty","FieldsManager","fields","newValue","clone","formatValue","indexOf","n","original","toString","split","charAt","numberWithCommasInputChange","validateField","list","field","test","checkDateFormat","checkDateDigits","isDateInTheFuture","parseFloat","dateString","parts","month","parseInt","trim","year","moment","toDate","format","FieldText","onChange","event","target","placeholder","className","addClass","errorLabelMessage","FieldPassword","Button","onClick","text","src","alt","LoginView","componentDidUpdate","prevProps","handleInputChange","setState","updateField","submitForm","submit","preventDefault","validateFields","translate","onKeyPress","to","connect","ResetPasswordView","href","Logout","title","HomeView","email","no_match","checkFieldsForErrors","password_confirm","is_new","NotFoundView","RegisterView","getFieldKeyValues","user_email","PrivateRoute","component","rest","render","pathname","from","location","PublicRoute","RouterListener","unlisten","listen","loggerMiddleware","store","next","window","_DEV_MODE","console","log","getState","eventsMiddleware","sagaMiddleware","createSagaMiddleware","initialStoreState","createStore","appDataReducers","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","App","translator","getComponent","createBrowserHistory","exact","Login","ResetPassword","ResetPasswordConfirm","routes","PureComponent","Boolean","hostname","Cookie","Error","createElement","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74db1ae8.chunk.js","sourcesContent":["const userReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return Object.assign({}, state, {\n                data: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null,\n                logout: false\n            });\n        case 'DONE_LOGIN':\n            return Object.assign({}, state, {\n                data: action.data,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_LOGIN':\n            return Object.assign({}, state, {\n                data: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n        case 'REGISTER':\n            return Object.assign({}, state, {\n                register: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null\n            });\n        case 'DONE_REGISTER':\n            return Object.assign({}, state, {\n                register: true,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_REGISTER':\n            return Object.assign({}, state, {\n                register: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n        case 'RESET_PASSWORD':\n            return Object.assign({}, state, {\n                reset: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null\n            });\n        case 'DONE_RESET_PASSWORD':\n            return Object.assign({}, state, {\n                reset: true,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_RESET_PASSWORD':\n            return Object.assign({}, state, {\n                reset: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n        case 'RESET_PASSWORD_CONFIRM':\n            return Object.assign({}, state, {\n                resetConfirm: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null\n            });\n        case 'DONE_RESET_PASSWORD_CONFIRM':\n            return Object.assign({}, state, {\n                resetConfirm: true,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_RESET_PASSWORD_CONFIRM':\n            return Object.assign({}, state, {\n                resetConfirm: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n        case 'SEND_SUPPORT':\n            return Object.assign({}, state, {\n                support: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null\n            });\n        case 'DONE_SEND_SUPPORT':\n            return Object.assign({}, state, {\n                support: true,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_SEND_SUPPORT':\n            return Object.assign({}, state, {\n                support: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n\n        case 'SEND_DEMO_REQUEST':\n            return Object.assign({}, state, {\n                requestDemo: null,\n                isLoading: true,\n                error: false,\n                errorMessage: null\n            });\n        case 'DONE_SEND_DEMO_REQUEST':\n            return Object.assign({}, state, {\n                requestDemo: true,\n                isLoading: false,\n                error: false,\n                errorMessage: null\n            });\n        case 'ERROR_SEND_DEMO_REQUEST':\n            return Object.assign({}, state, {\n                requestDemo: null,\n                isLoading: false,\n                error: true,\n                errorMessage: action.data\n            });\n        case 'UPDATE_USER_INFO':\n            return Object.assign({}, state, {\n                data: action.data\n            });\n        case 'LOGOUT_ME':\n            return Object.assign({}, state, {\n                logout: true\n            });\n        case 'RESET_USER_MESSAGE':\n            return Object.assign({}, state, {\n                requestDemo: false,\n                support: false,\n                reset: false,\n                error: false,\n                errorMessage: null\n            });\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;","const uiReducer = (state = {}, action) => {\n    switch (action.type) {\n\n        default:\n            return state;\n    }\n};\n\nexport default uiReducer;","import {combineReducers} from \"redux\";\nimport userReducer from \"./user\";\nimport uiReducer from \"./ui\";\n\nconst appReducer = combineReducers({\n    user: userReducer,\n    ui: uiReducer\n});\n\nconst rootReducer = (state, action) => {\n    if (action.type === 'LOGOUT') {\n        return {\n            ui: {},\n            user: {}\n        }\n    }\n    return appReducer(state, action);\n};\n\nexport default rootReducer;","export function login(data) {\n    return {\n        type: 'LOGIN',\n        data: data\n    };\n}\n\nexport function doneLogin(data) {\n    return {\n        type: 'DONE_LOGIN',\n        data: data\n    };\n}\n\nexport function errorLogin(data) {\n    return {\n        type: 'ERROR_LOGIN',\n        data: data\n    };\n}\n\nexport function logout(data) {\n    return {\n        type: 'LOGOUT_ME',\n        data: data\n    };\n}\n\nexport function logoutClear(data) {\n    return {\n        type: 'LOGOUT',\n        data: data\n    };\n}\n\nexport function resetPassword(data) {\n    return {\n        type: 'RESET_PASSWORD',\n        data: data\n    };\n}\n\nexport function doneResetPassword(data) {\n    return {\n        type: 'DONE_RESET_PASSWORD',\n        data: data\n    };\n}\n\nexport function errorResetPassword(data) {\n    return {\n        type: 'ERROR_RESET_PASSWORD',\n        data: data\n    };\n}\n\nexport function resetPasswordConfirm(data) {\n    return {\n        type: 'RESET_PASSWORD_CONFIRM',\n        data: data\n    };\n}\n\nexport function doneResetPasswordConfirm(data) {\n    return {\n        type: 'DONE_RESET_PASSWORD_CONFIRM',\n        data: data\n    };\n}\n\nexport function errorResetPasswordConfirm(data) {\n    return {\n        type: 'ERROR_RESET_PASSWORD_CONFIRM',\n        data: data\n    };\n}\n\nexport function resetUserMessage() {\n    return {\n        type: 'RESET_USER_MESSAGE'\n    }\n}\n\nexport function register(data) {\n    return {\n        type: 'REGISTER',\n        data: data\n    }\n}\n\nexport function doneRegister(data) {\n    return {\n        type: 'DONE_REGISTER',\n        data: data\n    };\n}\n\nexport function errorRegister(data) {\n    return {\n        type: 'ERROR_REGISTER',\n        data: data\n    };\n}","export default class Env {\n    static getApiUrl(path, query = null) {\n        return encodeURI(process.env.REACT_APP_API_URL+ path + Env.addQuery(query));\n    }\n\n    static addQuery(path) {\n        if (!!path) {\n            let result = ('?' +\n                (\n                    Object.keys(path).reduce(\n                        (memo, key) => {\n                            memo += (key + \"=\" + path[key] + \"&\");\n                            return memo;\n                        }\n                        , \"\")\n                )\n            );\n            return result.substring(0, result.length - 1);\n        }\n        return \"\";\n    }\n\n    static getPublicToken() {\n        return 'dGVzdGNsaWVudDp0ZXN0cGFzcw=';\n    }\n}","/**\n * Persistent storage\n */\nexport default class LocalStorage {\n    /**\n     * @param key\n     * @param def\n     */\n    static get(key, def = undefined) {\n        if (LocalStorage.has(key)) {\n            try {\n                return JSON.parse(localStorage.getItem(key));\n            } catch (err) {\n            }\n        }\n        return def;\n    }\n\n    /**\n     *\n     * @param key\n     * @param def\n     * @param callback\n     * @returns def\n     */\n    static getAndSave(key, def = {}, callback) {\n        let value = def;\n        if (LocalStorage.has(key)) {\n            value = LocalStorage.get(key);\n        }\n\n        LocalStorage.set(key, callback(value));\n    }\n\n    /**\n     * @param key\n     * @param value\n     */\n    static set(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n        } catch (err) {\n            // pass\n        }\n    }\n\n    /**\n     * @param key\n     * @returns {boolean}\n     */\n    static has(key) {\n        return localStorage.getItem(key) !== null;\n    }\n\n    /**\n     * @param key\n     */\n    static remove(key) {\n        localStorage.removeItem(key);\n    }\n\n    static clear() {\n        localStorage.clear();\n    }\n\n    static clearAllExcept(keepThem) {\n        for (let itemKey in localStorage) {\n            if (!keepThem.includes(itemKey)) {\n                LocalStorage.remove(itemKey);\n            }\n        }\n    }\n\n    static getAndRemove(key) {\n        const value = JSON.parse(localStorage.getItem(key));\n        LocalStorage.remove(key);\n        return value;\n    }\n}","import LocalStorage from \"./localStorage\";\n\nexport const READ_PERM = 1;\nexport const CREATE_PERM = 2;\nexport const UPDATE_PERM = 4;\nexport const DELETE_PERM = 8;\n\n\nexport function checkPerm(key, check) {\n    const perm = parseInt(getProp(LocalStorage.get('user'), 'permissions.' + key, 0));\n    return (perm & check) !== 0;\n}\n\nexport function getProp(object, keys, defaultVal) {\n    if (object === undefined || object === null) {\n        return defaultVal;\n    }\n    keys = Array.isArray(keys) ? keys : keys.split('.');\n    object = object[keys[0]];\n    if (object && keys.length > 1) {\n        return getProp(object, keys.slice(1), defaultVal);\n    }\n    return (object === undefined || object === null) ? defaultVal : object;\n}\n\nexport function getCurrentTimeSeconds() {\n    const d = new Date();\n    return Math.round(d.getTime() / 1000);\n}\n\nexport function numberWithCommasInputChange(n) {\n    if (n) {\n        let original = n.toString().split(\".\");\n        if (original[1] && original[1].length > 1) {\n            return original[0] + (original[1] ? \".\" + original[1].charAt(0) + original[1].charAt(1) : \"\");\n        } else {\n            n = n.replace(/[^0-9.]/g, '');\n            n = n.replace(/,/g, \"\");\n            n = n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return n;\n        }\n    }\n}","import {call, put} from \"redux-saga/effects\";\nimport Api from \"./api\";\nimport {logout} from \"../actions/user\";\nimport LocalStorage from \"../../util/localStorage\";\nimport {getCurrentTimeSeconds} from \"../../util/util\";\n\nexport function* checkUserHelper(user) {\n    const expires = Math.round(user.expires_in * (8 / 10));\n    const currTime = getCurrentTimeSeconds();\n\n    if ((user.obtain_time + expires) < currTime) {\n        let result = yield call(Api.refresh, user.refresh_token);\n\n        if (result && result.status === 0) {\n            result.data.obtain_time = currTime;\n            if (LocalStorage.get('user') && LocalStorage.get('user').Contact) {\n                const newUser = Object.assign({}, LocalStorage.get('user'), result.data);\n                LocalStorage.set('user', newUser);\n            }\n        } else {\n            yield put(logout());\n        }\n    }\n\n    return user;\n}\n\nexport function processResponse(response) {\n    return {\n        'status': 0,\n        'data': response.data.data\n    };\n}\n\nexport function processError(error) {\n    if (error.response) {\n        return {\n            'status': 2,\n            'data': error.response.data.error ? error.response.data.error : (error.response.data.message ? error.response.data.message : \"API_ERROR\")\n        }\n    } else if (error.request) {\n        return {\n            'status': 3,\n            'data': 'NO_RESPONSE'\n        }\n    } else {\n        return {\n            'status': 3,\n            'data': error.message\n        }\n    }\n}","import axios from \"axios\";\nimport Env from \"../../util/env\";\nimport {processError, processResponse} from \"./api-util\";\n\nexport default class Api {\nstatic login(username, password) {\n        return axios.post(\n            Env.getApiUrl('token'),\n            ('grant_type=password&username=' + encodeURIComponent(username) + '&password=' + encodeURIComponent(password)),\n            {\n                headers: {\n                    'Authorization': 'Basic ' + Env.getPublicToken(),\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }\n        )\n            .then((response) => {\n                return {\n                    'status': 0,\n                    'data': response.data\n                };\n            })\n            .catch((error) => {\n                return processError(error);\n            });\n    }\n\n    static refresh(token) {\n        return axios.post(\n            Env.getApiUrl('refresh'),\n            'grant_type=refresh_token&refresh_token=' + token,\n            {\n                headers: {\n                    'Authorization': 'Basic ' + Env.getPublicToken(),\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }\n        )\n            .then((response) => {\n                return {\n                    'status': 0,\n                    'data': response.data\n                };\n            })\n            .catch((error) => {\n                return processError(error);\n            });\n    }\n\n    static register(params) {\n        return axios.post(\n            Env.getApiUrl('api_pub/register'),\n            params,\n            {}\n        )\n            .then((response) => {\n                return processResponse(response);\n            })\n            .catch((error) => {\n                return processError(error);\n            })\n    }\n\n    static userInfo(user) {\n        return axios.get(\n            Env.getApiUrl('api/user'),\n            {\n                headers: {\n                    'Authorization': 'Bearer ' + user.access_token\n                }\n            }\n        )\n            .then((response) => {\n                return processResponse(response)\n            })\n            .catch((error) => {\n                return processError(error);\n            });\n    }\n\n    static resetPassword(username) {\n        return axios.post(\n            Env.getApiUrl('api_pub/reset-password'),\n            {\n                username: username\n            }\n        )\n            .then((response) => {\n                return processResponse(response);\n            })\n            .catch((error) => {\n                return processError(error);\n            });\n    }\n\n    static resetPasswordConfirm(username, token, password) {\n        return axios.post(\n            Env.getApiUrl('api_pub/reset-password-confirm'),\n            {\n                username: username,\n                token: token,\n                password: password\n            }\n        )\n            .then((response) => {\n                return processResponse(response);\n            })\n            .catch((error) => {\n                return processError(error);\n            });\n    }\n}","import {call, put, takeLatest} from \"redux-saga/effects\";\nimport {\n    doneLogin,\n    doneRegister,\n    doneResetPassword,\n    doneResetPasswordConfirm,\n    errorLogin,\n    errorRegister,\n    errorResetPassword,\n    errorResetPasswordConfirm\n} from \"../actions/user\";\nimport Api from \"../services/api\";\nimport LocalStorage from \"../../util/localStorage\";\nimport {getCurrentTimeSeconds} from \"../../util/util\";\n\nexport function *loginCall(action) {\n    const result = yield call(Api.login, action.data.username, action.data.password);\n\n    if (result && result.status === 0) {\n        const infoResult = yield call(Api.userInfo, result.data);\n\n        if (infoResult && infoResult.status === 0) {\n            let user = Object.assign(result.data, infoResult.data);\n            user.obtain_time = getCurrentTimeSeconds();\n\n            LocalStorage.set('user', user);\n            yield put(doneLogin(user));\n\n        } else {\n            yield put(errorLogin(infoResult.data));\n        }\n    } else {\n        yield put(errorLogin(result.data));\n    }\n}\n\nexport function* watchLoginCall() {\n    yield takeLatest('LOGIN', loginCall);\n}\n\nexport function *resetPasswordCall(action) {\n    const result = yield call(Api.resetPassword, action.data.username);\n\n    if (result && result.status === 0) {\n        yield put(doneResetPassword(result.data));\n    } else {\n        yield put(errorResetPassword(result.data));\n    }\n}\n\nexport function* watchResetPasswordCall() {\n    yield takeLatest('RESET_PASSWORD', resetPasswordCall);\n}\n\nexport function *resetPasswordConfirmCall(action) {\n    const result = yield call(Api.resetPasswordConfirm, action.data.username, action.data.token, action.data.password);\n\n    if (result && result.status === 0) {\n        yield put(doneResetPasswordConfirm(result.data));\n    } else {\n        yield put(errorResetPasswordConfirm(result.data));\n    }\n}\n\nexport function* watchResetPasswordConfirmCall() {\n    yield takeLatest('RESET_PASSWORD_CONFIRM', resetPasswordConfirmCall);\n}\n\nexport function *registerCall(action) {\n\n    const result = yield call(Api.register, action.data.params);\n\n    if (result && result.status === 0) {\n        yield put(doneRegister(result.data));\n    } else {\n        yield put(errorRegister(result.data));\n    }\n}\n\nexport function* watchRegisterCall() {\n    yield takeLatest('REGISTER', registerCall);\n}","import {\n    watchLoginCall,\n    watchRegisterCall,\n    watchResetPasswordCall,\n    watchResetPasswordConfirmCall\n} from \"./userSaga\";\nimport {all} from \"redux-saga/effects\";\n\n/*\n * Single entry point to start all Sagas at once\n =========================================================================================*/\nexport default function *rootSaga() {\n    yield all([\n        watchLoginCall(),\n        watchRegisterCall(),\n        watchResetPasswordCall(),\n        watchResetPasswordConfirmCall()\n    ]);\n}","export default class Translate {\n    constructor(locale, localeData) {\n        this.locale = locale;\n        this.localeData = localeData;\n    }\n\n    translate(key, args = null) {\n        if (this.localeData[key]) {\n            if (args) {\n                let lastArg = null;\n                return this.localeData[key].replace(/{(\\d+|s)}/g, function (match, number) {\n                    switch (number) {\n                        case 's':\n                            return (lastArg && args[lastArg] !== 'undefined') ?\n                                (args[lastArg] > 1 ? 's' : '') : '';\n                        default:\n                            lastArg = number;\n                            return typeof args[number] !== 'undefined'\n                                ? args[number]\n                                : match\n                                ;\n                    }\n                });\n            }\n            return this.localeData[key];\n        }\n        return key;\n    }\n}","import React, {Component} from \"react\";\nimport LocalStorage from \"../../util/localStorage\";\nimport {logoutClear} from \"../../data/actions/user\";\n\nexport default class PublicLayout extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            logout: false\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.user.logout) {\n            return {logout: true};\n        } else {\n            return null;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.logout) {\n            LocalStorage.clearAllExcept([\n                'username'\n            ]);\n            LocalStorage.remove('user');\n            this.props.dispatch(logoutClear());\n            this.props.history.push(\"/login\");\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.children}\n            </React.Fragment>\n        )\n    }\n}","import moment from \"moment\";\nimport {numberWithCommasInputChange} from \"../../util/util\";\n\nexport class Field {\n    constructor(name, value = '', validate = ['empty'], disabled = false) {\n        this.name = name;\n        this.value = !!value ? value : \"\";\n        this.errorMessage = null;\n        this.validate = validate;\n        this.isEmpty = !this.value || this.value.length === 0;\n        this.disabled = disabled;\n    }\n}\n\nexport class FieldsManager {\n    static updateField(fields, name, newValue) {\n        let clone = Object.assign({}, fields);\n        clone[name].value = FieldsManager.formatValue(newValue, clone[name].validate);\n        return clone;\n    }\n\n    static formatValue(value, validate) {\n        if (\n            (validate.indexOf('float') > -1)\n            || (validate.indexOf('float_or_empty') > -1)\n        ) {\n            return numberWithCommasInputChange(value);\n        }\n\n        return value;\n    }\n\n    static updateAndValidateField(fields, name, newValue) {\n        let clone = Object.assign({}, fields);\n        clone[name].value = FieldsManager.formatValue(newValue, clone[name].validate);\n        clone[name] = FieldsManager.validateField(clone[name]);\n        return clone;\n    }\n\n    static validateFields(fields, list = []) {\n        return Object.keys(fields)\n            .reduce((memo, key) => {\n                if (list.length === 0 || !!~list.indexOf(key)) {\n                    memo[key] = FieldsManager.validateField(fields[key]);\n                } else {\n                    memo[key] = fields[key];\n                }\n                return memo;\n            }, {});\n    }\n\n    static validateField(field) {\n        const errorMessage = field.validate.reduce((memo, type) => {\n            switch (type) {\n                case 'empty':\n                    if (!field.value) {\n                        memo.push('fields.errors.empty');\n                    }\n                    break;\n                case 'email':\n                    if (!/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/gi.test(field.value)) {\n                        memo.push('fields.errors.email');\n                    }\n                    break;\n                case 'password':\n                    if (!/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d!@#\\$%\\^&\\*]{8,}$/g.test(field.value)) {\n                        memo.push('fields.errors.password');\n                    }\n                    break;\n                case 'pin_four_digits':\n                    if (!/^\\d{4}$/g.test(field.value)) {\n                        memo.push('fields.errors.pin_four_digits');\n                    }\n                    break;\n                case 'date':\n                    if (!field.value) {\n                        // Just pass, empty is fine\n                    } else if (!FieldsManager.checkDateFormat(field.value)) {\n                        memo.push('fields.error.date_format');\n                    }\n                    break;\n                case 'future_date':\n                    if (!field.value) {\n                        // Just pass, empty is fine\n                    } else if (!FieldsManager.checkDateFormat(field.value)) {\n                        memo.push('fields.error.date_format');\n                    } else if (!FieldsManager.checkDateDigits(field.value)) {\n                        memo.push('fields.error.date_format_digits');\n                    } else if (!FieldsManager.isDateInTheFuture(field.value)) {\n                        memo.push('fields.error.outdated_date');\n                    }\n                    break;\n                case 'integer_or_empty':\n                    if ((field.value !== \"\") && !/^[0-9]+$/g.test(field.value)) {\n                        memo.push('fields.errors.integer');\n                    }\n                    break;\n                case 'integer':\n                    if (!/^[0-9]+$/g.test(field.value)) {\n                        memo.push('fields.errors.integer');\n                    }\n                    break;\n                case 'integer_up_to_100':\n                    if ((field.value !== \"\") && (!/^[0-9]+$/g.test(field.value)) || (field.value > 100)) {\n                        memo.push('fields.errors.integer_up_to_100');\n                    }\n                    break;\n                case 'float_or_empty':\n                    if ((field.value !== \"\") && !/\\d+(\\.\\d+)?/g.test(field.value)) {\n                        memo.push('fields.errors.float');\n                    }\n                    break;\n                case 'float':\n                    if (!/\\d+(\\.\\d+)?/g.test(field.value)) {\n                        memo.push('fields.errors.float');\n                    }\n                    break;\n                case 'float_up_to_100':\n                    if ((field.value !== \"\") && !/\\d+(\\.\\d+)?/g.test(field.value)) {\n                        memo.push('fields.errors.float_up_to_100');\n                    } else if ((field.value !== \"\") && parseFloat(field.value) > 100) {\n                        memo.push('fields.errors.float_up_to_100');\n                    }\n                    break;\n                default:\n                    break;\n            }\n            return memo;\n        }, []);\n        field.isEmpty = !field || !field.value || field.value.length === 0;\n\n        return Object.assign({}, field, {\n            errorMessage: errorMessage.length ? errorMessage : null\n        });\n    }\n\n    static checkFieldsForErrors(fields, list = []) {\n        return Object.keys(fields)\n            .reduce((memo, key) => {\n                if (list.length === 0 || !!~list.indexOf(key)) {\n                    return memo && (!fields[key].errorMessage);\n                } else {\n                    return memo;\n                }\n            }, true);\n    }\n\n    static disableFields(fields, list = []) {\n        return Object.keys(fields)\n            .reduce((memo, key) => {\n                if (list.length === 0 || !!~list.indexOf(key)) {\n                    fields[key].disabled = true;\n                    memo[key] = fields[key];\n                } else {\n                    memo[key] = fields[key];\n                }\n                return memo;\n            }, {});\n    }\n\n    static checkDateFormat(dateString) {\n        // First check for the pattern\n        return /^\\d{1,2} \\/ \\d{4}$/.test(dateString);\n    }\n\n    static checkDateDigits(dateString) {\n        // Parse the date parts to integers\n        const parts = dateString.split('/');\n        const month = parseInt(parts[0].trim(), 10);\n        const year = parseInt((parts[1].trim()), 10);\n\n        // Check the ranges of month and year\n        return !(year < 1000 || year > 3000 || month === 0 || month > 12);\n    }\n\n    static isDateInTheFuture(dateString) {\n        const expDate = moment(dateString, 'MM / YYYY').toDate();\n        const now = moment(moment().format('MM / YYYY'), 'MM / YYYY').toDate();\n        return !((expDate - now) < 0);\n    }\n\n    static getFieldKeyValues(fields) {\n        return Object.keys(fields)\n            .reduce((memo, key) => {\n                memo[key] = fields[key].value;\n                return memo;\n            }, {});\n    }\n}","import React, {Component} from \"react\";\n\nexport default class FieldText extends Component {\n\n    render() {\n\n        return (\n            <React.Fragment>\n                <input type={this.props.type}\n                       onChange={(event) => {\n                           this.props.onChange(this.props.name, event.target.value);\n                       }}\n                       name={this.props.name}\n                       value={this.props.value}\n                       placeholder={this.props.placeholder}\n                       disabled={this.props.disabled}\n                       className={this.props.addClass + (this.props.errorMessage ? \" is-invalid\" : \"\")}\n                />\n                {this.props.errorMessage && (\n                    <div className={\"invalid-feedback\"}>\n                        {this.props.errorLabelMessage ? this.props.errorLabelMessage : \"Field required*\"}\n                    </div>\n                )}\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\n\nexport default class FieldPassword extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <input type={\"password\"}\n                       onChange={(event) => {\n                           this.props.onChange(this.props.name, event.target.value);\n                       }}\n                       name={this.props.name}\n                       value={this.props.value}\n                       placeholder={this.props.placeholder}\n                       disabled={this.props.disabled}\n                       className={this.props.addClass + (this.props.errorMessage ? \" is-invalid\" : \"\")}\n                />\n                {this.props.errorMessage && (\n                    <div className={\"invalid-feedback text-left\"}>\n                        {this.props.errorLabelMessage ? this.props.errorLabelMessage : \"Field required*\"}\n                    </div>\n                )}\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\n\nexport default class Button extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className={this.props.className + (!!this.props.disabled ? \" disabled\" : \"\")} onClick={() => {\n                    !this.props.disabled && this.props.onClick();\n                }}\n                >\n                    {this.props.text}\n                </div>\n            </React.Fragment>\n        )\n    }\n}","import React from \"react\";\n\nexport default (props) => (\n    <div className={`action-container ${props.addClass}`}>\n        <div className=\"action-loader\"><img className=\"loading-img\" src=\"/images/loader/LoaderBigNew.gif\"\n                                            alt=\"loading\"/></div>\n    </div>\n)","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Layout from \"../../components/layout\";\nimport {Field, FieldsManager} from \"../../data/services/fields\";\nimport FieldText from \"../../components/field-text\";\nimport FieldPassword from \"../../components/field-password\";\nimport Button from \"../../components/button\";\nimport {login, resetUserMessage} from \"../../data/actions/user\";\nimport {Link} from \"react-router-dom\";\nimport LoaderSmall from \"../../components/loader-small\";\n\nclass LoginView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: {\n                username: new Field('username', '', ['empty']),\n                password: new Field('password', '', ['empty'])\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.props.dispatch(resetUserMessage());\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if ((prevProps.user.data === null) && (!!this.props.user.data)) {\n            this.props.history.push(\"/\");\n        }\n    };\n\n    handleInputChange = (name, value) => {\n        this.setState({fields: FieldsManager.updateField(this.state.fields, name, value)});\n    };\n\n    submitForm = (event) => {\n        if (event.key === 'Enter') {\n            this.submit(event);\n        }\n    };\n\n    submit = (event) => {\n        event && event.preventDefault();\n\n        this.setState({fields: FieldsManager.validateFields(this.state.fields)}, () => {\n            if (!this.state.fields.password.errorMessage && !this.state.fields.username.errorMessage) {\n                this.props.dispatch(login({\n                    username: this.state.fields.username.value,\n                    password: this.state.fields.password.value\n                }));\n            }\n        });\n    };\n\n    render() {\n        const {translate} = this.props;\n\n        return (\n            <Layout {...this.props}>\n                <form onKeyPress={this.submitForm}>\n                    <h1>{translate(\"text.sign_in\")}</h1>\n\n                    <p>\n                        {translate(\"text.please_login\")}<Link to=\"/register\">{translate(\"text.or_create_account\")}</Link>\n                    </p>\n\n                    <form>\n                        <div className=\"block-margin-bottom-10\">\n                            <FieldText\n                                onChange={this.handleInputChange} {...this.state.fields.username}\n                                placeholder={\"email@domain.com\"} type={\"email\"}\n                                addClass={\"form-control\"}/>\n                        </div>\n\n                        <div className=\"block-margin-bottom-10\">\n                            <FieldPassword\n                                onChange={this.handleInputChange} {...this.state.fields.password}\n                                placeholder={\"Enter your password\"} addClass={\"form-control\"}/>\n                        </div>\n\n                        {!this.props.user.isLoading && (\n                            <div className=\"block-margin-bottom-10\">\n                                <Button className=\"btn btn-primary btn-block\"\n                                        onClick={this.submit} text={translate(\"text.sign_in\")}/>\n                            </div>\n                        )}\n\n                        {this.props.user.isLoading && (\n                            <LoaderSmall/>\n                        )}\n                    </form>\n\n                    {this.props.user.error && (\n                        <span>{translate(this.props.user.errorMessage)}</span>\n                    )}\n                </form>\n            </Layout>\n        );\n    }\n}\n\nexport default connect(state => state)(LoginView);","import React, {Component} from \"react\";\nimport PublicLayout from \"../../components/layout\";\nimport connect from \"react-redux/es/connect/connect\";\nimport {Link} from \"react-router-dom\";\nimport {Field, FieldsManager} from \"../../data/services/fields\";\nimport {resetPassword, resetUserMessage} from \"../../data/actions/user\";\n\nclass ResetPasswordView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: {\n                username: new Field('username', '', ['email', 'empty'])\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.props.dispatch(resetUserMessage());\n    }\n\n    handleInputChange = (name, value) => {\n        this.setState({fields: FieldsManager.updateField(this.state.fields, name, value)});\n    };\n\n    submit = (event) => {\n        event && event.preventDefault();\n\n        this.setState({fields: FieldsManager.validateFields(this.state.fields)}, () => {\n            if (!this.state.fields.username.errorMessage) {\n                this.props.dispatch(resetPassword({\n                    username: this.state.fields.username.value\n                }))\n            }\n        })\n    };\n\n    render() {\n\n        return (\n            <PublicLayout {...this.props}>\n                <div>\n                    <div>\n                        <div>\n                            <h3>Forgot password</h3>\n                            <p>\n                                Enter your email to continue.\n                                <br/>\n                                Email needs to be valid and used before.\n                            </p>\n\n                            <div>\n                                <label>Email address</label>\n                                <input type=\"email\" className=\"form-control\" placeholder=\"email@domain.com\"/>\n                            </div>\n\n                            <a href=\"\">Reset password</a>\n                            <div>\n                                Sign in with another account? <Link to=\"/login\" className=\"tx-semibold\">Login</Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </PublicLayout>\n        );\n    }\n}\n\nexport default connect(state => state)(ResetPasswordView);","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {logout} from \"../../data/actions/user\";\n\nexport default class Logout extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Link title={this.props.title} className={this.props.addClass} onClick={() => {\n                    this.props.dispatch(logout({}));\n                }}>\n                    {this.props.translate(\"app.logout\")}\n                </Link>\n            </React.Fragment>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport PublicLayout from \"../../components/layout\";\nimport LoaderSmall from \"../../components/loader-small\";\nimport LocalStorage from \"../../util/localStorage\";\nimport {getProp} from \"../../util/util\";\nimport Logout from \"../../components/logout/index\";\n\nclass HomeView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        const {translate, history, dispatch} = this.props;\n\n        return (\n            <PublicLayout {...this.props}>\n                <h1>{translate(\"text.dashboard\")}</h1>\n\n                <div className=\"link-wrapper\">\n                    <Logout history={history} translate={translate} dispatch={dispatch}/>\n                </div>\n            </PublicLayout>\n        );\n    }\n}\n\nexport default connect(state => state)(HomeView);","import React, {Component} from \"react\";\nimport Layout from \"../../components/layout\";\nimport connect from \"react-redux/es/connect/connect\";\nimport {Link} from \"react-router-dom\";\nimport LoaderSmall from \"../../components/loader-small\";\nimport {Field, FieldsManager} from \"../../data/services/fields\";\nimport {resetPasswordConfirm} from \"../../data/actions/user\";\nimport FieldPassword from \"../../components/field-password/index\";\nimport Button from \"../../components/button/index\";\n\nclass ResetPasswordView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            no_match: false,\n            fields: {\n                password: new Field('password', '', ['empty']),\n                password_confirm: new Field('password_confirm', '', ['empty']),\n            },\n            is_new: this.props.match.params && !!this.props.match.params.is_new\n        };\n    }\n\n    handleInputChange = (name, value) => {\n        this.setState({fields: FieldsManager.updateField(this.state.fields, name, value)});\n    };\n\n    submitForm = (event) => {\n        if (event.key === 'Enter') {\n            this.submit(event);\n        }\n    };\n\n    submit = (event) => {\n        event && event.preventDefault();\n\n        const email = this.props.match.params && this.props.match.params.email;\n        const token = this.props.match.params && this.props.match.params.token;\n        this.setState({no_match: false, fields: FieldsManager.validateFields(this.state.fields)}, () => {\n            if (FieldsManager.checkFieldsForErrors(this.state.fields)) {\n                if (this.state.fields.password.value === this.state.fields.password_confirm.value) {\n                    this.props.dispatch(resetPasswordConfirm({\n                        username: email,\n                        token: token,\n                        password: this.state.fields.password.value\n                    }))\n                } else {\n                    this.setState({\n                        no_match: true\n                    })\n                }\n            }\n        })\n    };\n\n    render() {\n        const {translate} = this.props;\n\n        return (\n            <Layout {...this.props}>\n\n                <div>\n                    <div>\n                        {this.state.no_match && (\n                            <div>{translate(\"reset_password.no_match\")}</div>\n                        )}\n\n                        {!this.props.user.resetConfirm && (\n                            <React.Fragment>\n                                <section>\n                                    <div>\n                                        <div>\n                                            <div className=\"col-lg-6 bg-light\">\n                                                <div className=\"ht-100v d-flex align-items-center justify-content-center\">\n\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </section>\n                            </React.Fragment>\n                        )}\n\n                        {this.props.user.resetConfirm && (\n                            <section>\n                                <form onKeyPress={this.submitForm}>\n                                    <div>\n                                        <div>\n                                            <h3>{translate(\"text.choose_password\")}</h3>\n                                            <form>\n                                                <FieldPassword\n                                                    onChange={this.handleInputChange} {...this.state.fields.password}\n                                                    addClass=\"form-control\"\n                                                    placeholder={translate(\"field.placeholder.new_password\")}/>\n\n                                                <FieldPassword\n                                                    onChange={this.handleInputChange} {...this.state.fields.password_confirm}\n                                                    addClass=\"form-control\"\n                                                    placeholder={translate(\"field.placeholder.password_confirm\")}/>\n\n\n                                                {!this.props.user.isLoading && (\n                                                    <React.Fragment>\n                                                        <Button className={\"btn btn-primary btn-block\"} onClick={this.submit}\n                                                                text={this.state.is_new ? translate(\"btn.create_password\") : translate(\"btn.reset_password\")}/>\n                                                        <br/>\n                                                        <Link className=\"form-btn-submit link-like-element\" to={`/login`}>{translate(\"btn.back_to_login\")}</Link>\n                                                    </React.Fragment>\n                                                )}\n\n                                                {this.props.user.isLoading && (\n                                                    <LoaderSmall/>\n                                                )}\n                                            </form>\n\n                                            {this.props.user.error && (\n                                                <span>{translate(this.props.user.errorMessage)}</span>\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n\n                                <div>\n                                    <div>{this.state.is_new ? translate(\"create_password.success\") : translate(\"reset_password.success\")}</div>\n                                    <Link to={`/login`}>{translate(\"btn.back_to_login\")}</Link>\n                                </div>\n\n                            </section>\n                        )}\n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default connect(state => state)(ResetPasswordView);","import React, {Component} from \"react\";\nimport PublicLayout from \"../../components/layout\";\nimport {Link} from \"react-router-dom\";\nimport connect from \"react-redux/es/connect/connect\";\n\nclass NotFoundView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const {translate} = this.props;\n\n        return (\n            <PublicLayout {...this.props}>\n                <div>\n                    <h3>{translate(\"page.404.heading_main\")}</h3>\n                    <p>{translate(\"page.404.body\")}</p>\n                    <Link to={`/home`}>{translate(\"btn.back_to_home\")}</Link>\n                </div>\n            </PublicLayout>\n        );\n    }\n}\n\n\nexport default connect(state => state)(NotFoundView);","import React, {Component} from \"react\";\nimport Layout from \"../../components/layout\";\nimport connect from \"react-redux/es/connect/connect\";\nimport {Link} from \"react-router-dom\";\nimport LoaderSmall from \"../../components/loader-small\";\nimport {Field, FieldsManager} from \"../../data/services/fields\";\nimport {register} from \"../../data/actions/user\";\nimport Button from \"../../components/button/index\";\nimport FieldText from \"../../components/field-text/index\";\n\nclass RegisterView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: {\n                user_email: new Field('user_email', '', ['empty'])\n            }\n        };\n    }\n\n    handleInputChange = (name, value) => {\n        this.setState({fields: FieldsManager.updateField(this.state.fields, name, value)});\n    };\n\n    submitForm = (event) => {\n        if (event.key === 'Enter') {\n            this.submit(event);\n        }\n    };\n\n    submit = (event) => {\n        event && event.preventDefault();\n        this.setState({no_match: false, fields: FieldsManager.validateFields(this.state.fields)}, () => {\n            if (FieldsManager.checkFieldsForErrors(this.state.fields)) {\n                this.props.dispatch(register({\n                    params: FieldsManager.getFieldKeyValues(this.state.fields)\n                }));\n            }\n        });\n    };\n\n    render() {\n        const {translate} = this.props;\n\n        return (\n            <Layout {...this.props}>\n                <h1>{translate(\"text.register\")}</h1>\n\n                {!this.props.user.isLoading && !this.props.user.register && (\n                    <form onKeyPress={this.submitForm}>\n                        <div className=\"block-margin-bottom-10\">\n                            <FieldText\n                                onChange={this.handleInputChange} {...this.state.fields.user_email}\n                                placeholder={\"email@domain.com\"} type={\"email\"}/>\n                        </div>\n\n                        <div className=\"block-margin-bottom-10\">\n                            <Button\n                                onClick={this.submit}\n                                text={translate(\"btn.register\")}/>\n                        </div>\n                    </form>\n                )}\n\n                {this.props.user.isLoading && (\n                    <LoaderSmall/>\n                )}\n\n                {this.props.user.register && (\n                    <React.Fragment>\n                        <div>{translate(\"text.register_success\")}</div>\n                        <Link to={`/login`}>{translate(\"btn.back_to_login\")}</Link>\n                    </React.Fragment>\n                )}\n\n                {this.props.user.error && (\n                    <span>{translate(this.props.user.errorMessage)}</span>\n                )}\n            </Layout>\n        );\n    }\n}\n\nexport default connect(state => state)(RegisterView);","import React, {Component} from \"react\";\nimport {createBrowserHistory} from \"history\";\nimport {Redirect, Route as NeutralRoute, Router, Switch} from \"react-router-dom\";\nimport Login from \"./views/login\";\nimport ResetPassword from \"./views/reset-password\";\nimport HomeView from \"./views/home\";\nimport ResetPasswordConfirm from \"./views/reset-password-confirm\";\nimport LocalStorage from \"./util/localStorage\";\nimport NotFoundView from \"./views/not-found\";\nimport {hideModals} from \"./data/actions/ui\";\nimport RegisterView from \"./views/register\";\n\nconst PrivateRoute = ({component: Component, ...rest}) => (\n    <NeutralRoute\n        {...rest}\n        render={props =>\n            (!!LocalStorage.get('user')) ? (<Component {...props}/>) : (\n                <Redirect to={{\n                    pathname: \"/login\",\n                    state: {from: props.location}\n                }}/>\n            )\n        }\n    />\n);\n\nconst PublicRoute = ({component: Component, ...rest}) => (\n    <NeutralRoute\n        {...rest}\n        render={props =>\n            (!LocalStorage.get('user')) ? (<Component {...props}/>) : (\n                <Redirect to={{\n                    pathname: \"/home\",\n                    state: {from: props.location}\n                }}/>\n            )\n        }\n    />\n);\n\nclass RouterListener extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.unlisten = null;\n        this.state = { }\n    }\n\n    componentDidMount() {\n        this.unlisten = this.props.history.listen((location, action) => {\n\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.unlisten) {\n            this.unlisten();\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.children}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default (store, translator) => {\n    function getComponent(Component, props) {\n        return (\n            <Component {...props} translate={(key, args) => translator.translate(key, args)}/>\n        );\n    }\n\n    const history = createBrowserHistory();\n    store.history = history;\n\n    return (\n        <Router history={history}>\n            <RouterListener history={history} dispatch={store.dispatch} {...store.getState()}\n                            translate={(key, args) => translator.translate(key, args)}>\n                <Switch>\n                    <PublicRoute exact path=\"/\" component={(props) => getComponent(Login, props)}/>\n                    <PublicRoute exact path=\"/login\" component={(props) => getComponent(Login, props)}/>\n\n                    <PublicRoute exact path=\"/register\" component={(props) => getComponent(RegisterView, props)}/>\n                    <PublicRoute exact path=\"/reset-password\" component={(props) => getComponent(ResetPassword, props)}/>\n                    <NeutralRoute exact path=\"/reset-password-confirm/:email/:token/:is_new\"\n                                  component={(props) => getComponent(ResetPasswordConfirm, props)}/>\n\n                    <PrivateRoute exact path=\"/home\" component={(props) => getComponent(HomeView, props)}/>\n\n                    <NeutralRoute component={(props) => getComponent(NotFoundView, props)}/>\n                </Switch>\n            </RouterListener>\n        </Router>\n    );\n}","const loggerMiddleware = store => next => action => {\n    let result = next(action);\n    if (window._DEV_MODE) {\n        console.log('dispatching:', action);\n        console.log('next store state:', store.getState());\n    }\n    return result;\n};\n\nexport default loggerMiddleware","import {logout} from \"../data/actions/user\";\n\nconst eventsMiddleware = store => next => action => {\n\n    if (action.data === \"invalid_token\") {\n        store.dispatch(logout());\n        return store.getState();\n    }\n\n    return next(action);\n};\n\nexport default eventsMiddleware","import React, {PureComponent} from \"react\";\nimport moment from \"moment\";\nimport {Provider as Redux} from \"react-redux\";\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport appDataReducers from \"./data/reducers\";\nimport rootSaga from \"./data/sagas\";\nimport Translate from \"./data/services/translate\";\nimport routes from \"./routes\";\nimport loggerMiddleware from \"./middleware/logger\";\nimport eventsMiddleware from \"./middleware/events\";\nimport LocalStorage from \"./util/localStorage\";\n\n/**\n * App is using redux-saga for handling side effects (async calls)\n =========================================================================================*/\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\n * Store is single source of truth for the app, it is hub for all the data and data events\n =========================================================================================*/\nconst initialStoreState = {\n    user: {\n        data: LocalStorage.has('user') ? LocalStorage.get('user') : {}\n    }\n};\n\nlet store = createStore(\n    appDataReducers,\n    initialStoreState,\n    compose(\n        applyMiddleware(\n            sagaMiddleware,\n            eventsMiddleware,\n            loggerMiddleware\n        ),\n        window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n    )\n);\n\nsagaMiddleware.run(rootSaga);\n\n/**\n * Root App Component\n =========================================================================================*/\nexport default class App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        moment.locale(props.locale);\n    }\n\n    render() {\n        const {locale, localeData} = this.props;\n        const translator = new Translate(locale, localeData);\n\n        return (\n            <Redux store={store}>\n                {routes(store, translator)}\n            </Redux>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import {render} from \"react-dom\";\nimport {createElement} from \"react\";\nimport App from \"./app\";\nimport \"./styles/style.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\nimport Cookie from \"./util/localStorage\";\n\n/*\n * Globals\n =========================================================================================*/\nwindow._DEV_MODE = true;\n\n/*\n * Locale data preload\n =====================================================================================*/\nconst locale = Cookie.has('locale')?Cookie.get('locale'):'en';\naxios.get(`/locale/${locale}.json`)\n    .then((response) => {\n        if (response.status >= 400) {\n            throw new Error('Bad response from server');\n        }\n\n        return response.data;\n    })\n    .then((localeData) => {\n        render(\n            createElement(App, {locale: locale, localeData: localeData}),\n            window.document.getElementById('root')\n        );\n    })\n    .catch((error) => {\n        console.error(error);\n    });\n/*\n * Service worker\n ===================================================================================*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}